var restorers = [];

// create stub functions with call counter to ensure ran
//
// eg.
//
//    stub = require('./stub');
//
//    var calls = stub(object, function nameOfFunction(arg) {
//
//      arg.should.equal('what it should');
//  
//    });
//
//    calls.count.should.equal(1);
//
//    remember to clean up... (resore original functions) see below
//

module.exports = function stub(object, alternateFunction) {
                        //spy(... kinda similar

  var methodName = alternateFunction.name;

  var origMethod = object[methodName];

  object[methodName] = function() {

    restorer.count++; // count calls to stub

    return alternateFunction.apply(this, arguments);

    // spy would call alternate AND origMethod

  }

  var restorer = function() {

    object[methodName] = origMethod;
    return restorer;

  }

  restorer.count = 0

  restorers.push(restorer);

  return restorer;

}

// into afterEach to restore original functions after each test
//
// eg.
//
//    afterEach(stub.restore);
//  

module.exports.restore = function() {
  var restorer;
  while(restorer = restorers.shift()) restorer();
}

