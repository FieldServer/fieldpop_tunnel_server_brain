module.exports = Reporter;

var fs = require('fs');
var path = require('path');
var os = require('os');
var report = {};
var pointer = report;
var now = Date.now();

var getHostDetails = function() {
  var details = {};
  ['platform', 'arch', 'totalmem', 'freemem', 'loadavg', 'cpus'].forEach(
    function(fname) {
      details[fname] = os[fname]();
    }
  );
  return details;
}

var copy = function(test, error) {    
    var t = {};

    // has circular refs, only copy non object...
    Object.keys(test).forEach(function(key) {
      if (typeof test[key] == 'object') return;
      if (key == 'file') {
        t[key] = path.relative(process.cwd(), test[key]);
        return;
      }
      t[key] = test[key];
    });

    if (error) {
      t.error = {
        name: error.name,
        message: error.message,
      }
    }

    return t;
}

function Reporter(name) {

  pointer[name] = {};
  pointer = pointer[name];

  pointer[now] = {
    host: getHostDetails(),
    results: {

    }
  };
  pointer = pointer[now].results;


  var suiteStack = [];

  return function(runner) {

    runner.on('suite', function(suite) {
      suiteStack.push(suite.title);
    });

    runner.on('suite end', function() {
      suiteStack.pop();
    });


    runner.on('pass', function(test){
      var path = suiteStack.join('/') + '/' + test.title;
      pointer[path] = copy(test);
    });

    runner.on('fail', function(test, err){
      var path = suiteStack.join('/') + '/' + test.title;
      pointer[path] = copy(test, err);
    });

    runner.on('end', function(){
      fs.writeFileSync(path.normalize(process.cwd() + path.sep + 'runs' + path.sep + name + '-' + now + '.json'), JSON.stringify(report, null, 2));
    });
  }
}
