var stub = require('../stub');
// var toss = require('../toss');
var log = require('../log');
var should = new require('chai').should();
// var Promise = require('bluebird');
var WebsocketTunnelController = require('../../lib');
var WebSocketClient = require('websocket').client;
var WstClientReverse = require('../../lib/tunnel/wst_client_reverse');
var WstServerReverse = require('../../lib/tunnel/wst_server_reverse');
var url = require('url');

describe('tunnel/wst_client_reverse.js', function() {

  this.timeout(0);

  beforeEach(function() {

    this.opts = {
      id: '1',
      name: 'name',
      description: 'description',
      defaultForwardingPort: 3000,
      forwardingService: 'ws://10.10.10.10:8080',
      forwardTo: '127.0.0.1:3000',
      hostname: '__HOSTNAME__',
      ifaces: '__IP__,__IP__',
      serial: 'pending_serial_no',
    };

    this.$happn = {
      log: log
    }

  });

  afterEach(stub.restore);

  context('start()', function() {

    it('connects to the forwardingService websocket with useful data in query string', function(done) {

      var c = new WstClientReverse(this.$happn.log);

      var calls = stub(WebSocketClient.prototype,

        function connect(URL) {

          var uri = url.parse(URL, true);

          uri.host.should.equal('10.10.10.10:8080');

          uri.query.should.eql({
            init: '1',
            version: '1',
            id: '1',
            port: '3000',
            to:  '127.0.0.1:3000',
            sn:  'pending_serial_no',
            hostname: '__HOSTNAME__',
            ifaces: '__IP__,__IP__',
            name: 'name',
            desc: 'description',
          });
          
        }
      );

      c.start(this.opts, function(e, _) {
        calls.count.should.equal(1);
        done();
      });

    });

    it('keeps trying to connect', function(done) {

      var c = new WstClientReverse(this.$happn.log);

      var callsConnect = stub(WebSocketClient.prototype,
        function connect(URL) {}
      );

      stub(WebSocketClient.prototype,
        function on(event, handler) {
          process.nextTick(function() {
            if (event == 'connectFailed') handler();
          });
        }
      );

      this.opts.retryStartingInterval = 100;

      c.start(this.opts, function(e, _) {
        setTimeout(function() {
          callsConnect.count.should.equal(2);
          done();
        }, 200)

      });

    });


    it('reconnects after server restart', function(done) {

      var s = new WstServerReverse(this.$happn.log);

      var connectCount = 0

      s.on('tunnel/create', function(info, wsControl) {
        
        // console.log('tunnel/create', info);

        connectCount++;

        if (connectCount > 1) return done()

        // close server as soon as tunnel connected

        wsControl.close();

      });

      var _this = this;

      s.start({wsport: 23456}, function(e) {
        if (e) return done(e);

        var c = new WstClientReverse(_this.$happn.log);

        c.start({
          forwardingService: 'ws://localhost:23456',
          forwardTo: '127.0.0.1:3000',
          healthInterval: 1000,
          healthReconnectTimeout: 10000,
        }, function(e) {

          if (e) return done(e);

        });

      });

    });

    it('reconnects if server does not respond to health ping within healthReconnectTimeout', function(done) {

      var s = new WstServerReverse(this.$happn.log);

      var count = 0;

      s.on('tunnel/create', function(info, wsControl) {

        count++;

        if (count == 2) {
          // Testing for two reconnects to ensure the state fully resets itself on the clientside
          done();
        }

        // console.log('tunnel/create', info);

        // Make server not reply to HH (health ping)
        var sendUTF = wsControl.sendUTF;
        wsControl.sendUTF = function(message) {
          // console.log('MM', message);
          if (message.match(/^HH:/)) return;
          sendUTF.call(wsControl, message);
        }
      
      });

      var _this = this;

      s.start({wsport: 23457}, function(e) {
        if (e) return done(e);

        var c = new WstClientReverse(_this.$happn.log);

        c.start({
          forwardingService: 'ws://localhost:23457',
          forwardTo: '127.0.0.1:3000',
          healthInterval: 10,
          healthReconnectTimeout: 200,
        }, function(e) {

          if (e) return done(e);

        });

      });

    });

  });

  context('Events', function() {

    it('has no client events yet');

  });

});
